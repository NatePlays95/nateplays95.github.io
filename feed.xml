<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://nateplays95.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nateplays95.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-05T16:38:46+00:00</updated><id>https://nateplays95.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computer Science student and game developer. </subtitle><entry><title type="html">Godot - making polygon colliders from AnimatedSprite2D</title><link href="https://nateplays95.github.io/blog/2024/animated-sprite-polygon-godot4/" rel="alternate" type="text/html" title="Godot - making polygon colliders from AnimatedSprite2D"/><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>https://nateplays95.github.io/blog/2024/animated-sprite-polygon-godot4</id><content type="html" xml:base="https://nateplays95.github.io/blog/2024/animated-sprite-polygon-godot4/"><![CDATA[<div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I made a little tool script that can generate polygon shapes for Area2D nodes for each frame of an AnimatedSprite2D, and make those areas active and inactive at runtime. It is based on a few assumptions, like your AnimatedSprite2D doesn’t use offsets and your AtlasTextures don’t use margins, but I’m sure those would be easy to add in if needed.</p> <p>The road to it was a bit bumpy, though. It has been a while since I made it so I don’t rememeber all the details but I still want to share my journey, as well as the tool’s code.</p> <h3 id="context">Context</h3> <p>In January I took some time off to learn a bit more about multiplayer games in Godot by making a fighting game (er, following a tutorial that is). Fighting games are pretty complex so a tutorial could be a good primer, and I already made some action games before so that knowledge could translate here too.</p> <p>I like Super Smash Bros so I was very inclined to follow <a href="https://www.youtube.com/watch?v=FKMBkZsPCCA&amp;list=PLeJDGeZe3by2tQIJmCZfaSRl95cot070t">this tutorial series by Apano</a>. There are a few design patterns I don’t totally agree with but it’s very serviceable. I promptly implemented everything and had fun with how smooth it felt. Just one problem: the tutorial used the character’s solid collision square box as the damage hurtbox, which meant it couldn’t quite reflect the different sprites. It also meant, for the game to be juicy, you had to exaggerate the attack hitboxes which would further highlight the problem.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>Side note: I didn’t have a second controller to test multiplayer, but I’ve since learned Godot can recognize virtual controllers from <em>Parsec</em>. It has been my favorite way to test multiplayer games. I’m not being paid to say this (unfortunately) but it’s pretty cool.</p> <h3 id="research">Research</h3> <p>TheShaggyDev is one of my favorite Godot creators as he dives deep into his design process for code and project structure, and many of his projects align with my likes. I was delighted to know he had made a video on getting polygon shapes (for static colliders) from Sprite2D nodes.</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/Btk8IzhvaDo?si=YIluHglNY37pbH3S" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="caption">There's also a text version linked in the video's description.</div> <p>That’s cool and all, but how would I do that for every frame in an AnimatedSprite2D? I couldn’t generate the polygons at runtime as the algorithm is pretty slow, so I would need to generate one shape for each frame, then activate and deactivate them at runtime. I needed to make a tool script that would generate all my polygons when I ticked a checkbox (in the lack of tool script buttons).</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">run_tool</span><span class="p">():</span>
	<span class="k">var</span> <span class="n">anim_sprite</span> <span class="p">:</span><span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span> <span class="k">as</span> <span class="n">AnimatedSprite2D</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">anim_sprite</span><span class="p">:</span>
		<span class="n">push_error</span><span class="p">(</span><span class="s2">"Parent is not AnimatedSprite2D"</span><span class="p">)</span>
        <span class="k">return</span>

	<span class="n">hurtbox_dict</span> <span class="o">=</span> <span class="p">{}</span>
	
	<span class="k">var</span> <span class="n">bitmap</span> <span class="p">:</span> <span class="n">BitMap</span>
	<span class="k">var</span> <span class="n">current_texture</span> <span class="p">:</span> <span class="n">Texture2D</span>
	
	<span class="k">var</span> <span class="n">old_hurtboxes</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_node_or_null</span><span class="p">(</span><span class="s2">"Hurtboxes"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">old_hurtboxes</span><span class="p">:</span>
		<span class="n">old_hurtboxes</span><span class="o">.</span><span class="n">queue_free</span><span class="p">()</span>
	
	<span class="k">var</span> <span class="n">results_node</span> <span class="p">:</span><span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="n">anim_sprite</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Hurtboxes"</span>
	<span class="n">hurtboxes_path</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
</code></pre></div></div> <p>Now I just had to find the sprite’s texture as it was shown on the AnimatedSprite2D, and make polygons from that. How hard could it be? It’s probably right there in the documentation, right?</p> <h3 id="getting-the-frames-texture">Getting the frame’s texture.</h3> <p>Most of my frames were imported as AtlasTextures for brevity’s sake and to not bloat each character’s folder with a hundred files; if I had each frame separately I could probably used ShaggyDev’s aproach by using a simple Sprite2D and changing its frame to another file for each shape. Following that approach approach of getting the texture directly wouldn’t work with AnimatedSprite2D as there was no one single texture for the entire animation; each frame of each animation can have a texture taken from a separate file, or an atlas made from a file, or even a blank texture.</p> <p>For a long time I tried creating a new <em>viewport</em>, rendering the AnimatedSprite2D there, saving the <em>render texture</em> and using that, but in retrospect even if it worked, it wouldn’t have accounted for different sizes in sprite frames… I wish I had commited every single attempt just to look back on them, because I had some really absurd ideas. I’m not even sure if it every rendered anything, although I remember getting a polygon from an entirely unrelated section of the Atlas.</p> <p><i>Eventually, I found: Texture2D SpriteFrames.get_frame_texture(anim: StringName, idx: int). It’s in the documentation.</i></p> <p>So that was a relief. I just needed to make an image from it… wait, why is it blank? For whatever reason (and without breakpoints for tool scripts it took a whole morning to find out) the generated texture when converted to a bitmap wouldn’t show as a cut-up region of its AtlasTexture during the tool’s execution. It was entirely blank. I tied to print the “region” field but it was all 0,0. I couldn’t figure out why for another long period of time.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">sprite_frames</span> <span class="p">:</span> <span class="n">SpriteFrames</span> <span class="o">=</span> <span class="n">anim_sprite</span><span class="o">.</span><span class="n">sprite_frames</span>
<span class="k">for</span> <span class="n">animation_name</span> <span class="ow">in</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_animation_names</span><span class="p">():</span>
    <span class="n">anim_sprite</span><span class="o">.</span><span class="n">animation</span> <span class="o">=</span> <span class="n">animation_name</span>
    
    <span class="k">for</span> <span class="n">frame_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_count</span><span class="p">(</span><span class="n">animation_name</span><span class="p">)):</span>
        <span class="n">anim_sprite</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame_index</span>
        
        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitMap</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
        <span class="n">current_texture</span> <span class="o">=</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_texture</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">)</span>
</code></pre></div></div> <p>My final solution was to get the atlas and make it into an image, as before. I finally found the AtlasTexture “region” field which this time had actual values in it. Then, the fruit of another half an hour of reading documentation I found code Image.get_region(Rect2Di region) and the region field in the atlas texture worked. Wheww. There’s also a tweak for if the source is an entire file or blank.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inside the inner for loop</span>
<span class="k">if</span> <span class="n">current_texture</span> <span class="k">is</span> <span class="n">AtlasTexture</span><span class="p">:</span>
    <span class="k">var</span> <span class="n">img</span> <span class="o">=</span> <span class="n">current_texture</span><span class="o">.</span><span class="n">atlas</span><span class="o">.</span><span class="n">get_image</span><span class="p">()</span><span class="o">.</span><span class="n">get_region</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">region</span><span class="p">)</span>
    <span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> <span class="c1"># file or blank</span>
    <span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">get_image</span><span class="p">())</span>
</code></pre></div></div> <h3 id="finishing-the-tool">Finishing the tool</h3> <p>Now I just needed to generate the polygons. At first I wanted just one Area2D and one polygon per frame, but if the sprite had separate sections that wouldn’t add into a single shape they would be skipped. Instead, I have an Area2D for each frame, which can hold multiple polygons if needed. I’m also adding all the node references for each area into a dictionary to avoid excessive get_node calls.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inside the inner for loop as well</span>
<span class="k">var</span> <span class="n">polys</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">opaque_to_polygons</span><span class="p">(</span><span class="n">Rect2i</span><span class="p">(</span><span class="kt">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()),</span> <span class="n">epsilon</span><span class="p">)</span>

<span class="k">var</span> <span class="n">area</span> <span class="o">=</span> <span class="n">Area2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<span class="n">results_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
<span class="n">area</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
<span class="n">area</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">]</span>
<span class="n">hurtbox_dict</span><span class="p">[</span><span class="n">area</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>

<span class="k">for</span> <span class="n">poly</span> <span class="ow">in</span> <span class="n">polys</span><span class="p">:</span>
    <span class="k">var</span> <span class="n">collision_polygon</span> <span class="o">=</span> <span class="n">CollisionPolygon2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">polygon</span> <span class="o">=</span> <span class="n">poly</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">-</span><span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span> <span class="c1"># assume centered</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>
    <span class="n">area</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">collision_polygon</span><span class="p">)</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">Each area has a name matching an animation and a frame index.</div> <h3 id="updating-during-runtime">Updating during runtime</h3> <p>The helper node also has functions to be executed at runtime. Currently it waits for signals from the AnimatedSprite2D node, but I’m not sure if it introduces a physics frame of delay or not. Alternatively you could run update_shape inside _physics_process.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">update_shape</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">hurtboxes_node</span><span class="p">:</span> <span class="k">return</span>
    <span class="c1"># disable everything</span>
	<span class="k">for</span> <span class="n">inactive_hurtbox</span> <span class="p">:</span> <span class="n">Area2D</span> <span class="ow">in</span> <span class="n">hurtboxes_node</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">disable_area</span><span class="p">(</span><span class="n">inactive_hurtbox</span><span class="p">)</span>
    <span class="c1"># enable the active one searching the dict</span>
	<span class="k">var</span> <span class="n">active_hurtbox</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtbox_dict</span><span class="p">[</span><span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">current_animation</span><span class="p">,</span> <span class="n">current_frame</span><span class="p">]])</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">active_hurtbox</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">true</span>
	<span class="n">active_hurtbox</span><span class="o">.</span><span class="n">scale</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="p">(</span>
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_h</span> <span class="k">else</span> <span class="mi">1</span><span class="p">,</span> 
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_v</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <h3 id="code">Code</h3> <p>Here’s the entire code for this tool. It is a Node2D that should be inserted as a child of the AnimatedSprite2D to animate, and it will handle changing the hurtboxes at runtime too.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">@</span><span class="k">tool</span>
<span class="k">extends</span> <span class="n">Node2D</span>
<span class="c1">## poly_animsprite_helper.gd</span>


<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">epsilon</span> <span class="p">:</span> <span class="kt">float</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">generate</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span> <span class="p">:</span>
	<span class="n">set</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
		<span class="k">if</span> <span class="n">Engine</span><span class="o">.</span><span class="n">is_editor_hint</span><span class="p">():</span> <span class="n">run_tool</span><span class="p">()</span>
		<span class="n">generate</span> <span class="o">=</span> <span class="n">value</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">hurtbox_dict</span> <span class="p">:</span> <span class="kt">Dictionary</span> <span class="o">=</span> <span class="p">{}</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">hurtboxes_path</span> <span class="p">:</span> <span class="kt">NodePath</span>

<span class="k">var</span> <span class="n">current_animation</span> <span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s2">""</span>
<span class="k">var</span> <span class="n">current_frame</span> <span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">var</span> <span class="n">animated_sprite</span> <span class="p">:</span> <span class="n">AnimatedSprite2D</span>
<span class="k">var</span> <span class="n">hurtboxes_node</span> <span class="p">:</span> <span class="n">Node2D</span>


<span class="k">func</span> <span class="nf">_ready</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">Engine</span><span class="o">.</span><span class="n">is_editor_hint</span><span class="p">():</span>
		<span class="n">animated_sprite</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span>
		<span class="n">animated_sprite</span><span class="o">.</span><span class="n">animation_changed</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">_on_animation_changed</span><span class="p">)</span>
		<span class="n">animated_sprite</span><span class="o">.</span><span class="n">frame_changed</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">_on_frame_changed</span><span class="p">)</span>
		<span class="n">hurtboxes_node</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtboxes_path</span><span class="p">)</span>


<span class="k">func</span> <span class="nf">_on_animation_changed</span><span class="p">():</span>
	<span class="n">current_animation</span> <span class="o">=</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">animation</span>
	<span class="n">current_frame</span> <span class="o">=</span> <span class="mi">0</span>
	<span class="n">update_shape</span><span class="p">()</span>


<span class="k">func</span> <span class="nf">_on_frame_changed</span><span class="p">():</span>
	<span class="n">current_frame</span> <span class="o">=</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">frame</span>
	<span class="n">update_shape</span><span class="p">()</span>


<span class="k">func</span> <span class="nf">update_shape</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">hurtboxes_node</span><span class="p">:</span> <span class="k">return</span>
	<span class="k">for</span> <span class="n">inactive_hurtbox</span> <span class="p">:</span> <span class="n">Area2D</span> <span class="ow">in</span> <span class="n">hurtboxes_node</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">disable_area</span><span class="p">(</span><span class="n">inactive_hurtbox</span><span class="p">)</span>
	
	<span class="k">var</span> <span class="n">active_hurtbox</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtbox_dict</span><span class="p">[</span><span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">current_animation</span><span class="p">,</span> <span class="n">current_frame</span><span class="p">]])</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">active_hurtbox</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">true</span>
	<span class="n">active_hurtbox</span><span class="o">.</span><span class="n">scale</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="p">(</span>
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_h</span> <span class="k">else</span> <span class="mi">1</span><span class="p">,</span> 
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_v</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>


<span class="k">func</span> <span class="nf">disable_area</span><span class="p">(</span><span class="n">area</span><span class="p">:</span><span class="n">Area2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">area</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>


<span class="k">func</span> <span class="nf">run_tool</span><span class="p">():</span>
	<span class="k">var</span> <span class="n">anim_sprite</span> <span class="p">:</span><span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span> <span class="k">as</span> <span class="n">AnimatedSprite2D</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">anim_sprite</span><span class="p">:</span>
		<span class="n">push_error</span><span class="p">(</span><span class="s2">"Parent is not AnimatedSprite2D"</span><span class="p">)</span>
		<span class="k">return</span>
	
	<span class="n">hurtbox_dict</span> <span class="o">=</span> <span class="p">{}</span>
	
	<span class="k">var</span> <span class="n">bitmap</span> <span class="p">:</span> <span class="n">BitMap</span>
	<span class="k">var</span> <span class="n">current_texture</span> <span class="p">:</span> <span class="n">Texture2D</span>
	
	<span class="k">var</span> <span class="n">old_hurtboxes</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_node_or_null</span><span class="p">(</span><span class="s2">"Hurtboxes"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">old_hurtboxes</span><span class="p">:</span>
		<span class="n">old_hurtboxes</span><span class="o">.</span><span class="n">queue_free</span><span class="p">()</span>
	
	<span class="k">var</span> <span class="n">results_node</span> <span class="p">:</span><span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="n">anim_sprite</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Hurtboxes"</span>
	<span class="n">hurtboxes_path</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	
	<span class="k">var</span> <span class="n">sprite_frames</span> <span class="p">:</span> <span class="n">SpriteFrames</span> <span class="o">=</span> <span class="n">anim_sprite</span><span class="o">.</span><span class="n">sprite_frames</span>
	<span class="k">for</span> <span class="n">animation_name</span> <span class="ow">in</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_animation_names</span><span class="p">():</span>
		<span class="n">anim_sprite</span><span class="o">.</span><span class="n">animation</span> <span class="o">=</span> <span class="n">animation_name</span>
		
		<span class="k">for</span> <span class="n">frame_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_count</span><span class="p">(</span><span class="n">animation_name</span><span class="p">)):</span>
			<span class="n">anim_sprite</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame_index</span>
			
			<span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitMap</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
			<span class="n">current_texture</span> <span class="o">=</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_texture</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">)</span>
			
			<span class="k">if</span> <span class="n">current_texture</span> <span class="k">is</span> <span class="n">AtlasTexture</span><span class="p">:</span>
				<span class="k">var</span> <span class="n">img</span> <span class="o">=</span> <span class="n">current_texture</span><span class="o">.</span><span class="n">atlas</span><span class="o">.</span><span class="n">get_image</span><span class="p">()</span><span class="o">.</span><span class="n">get_region</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">region</span><span class="p">)</span>
				<span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">get_image</span><span class="p">())</span>
			
			
			<span class="k">var</span> <span class="n">polys</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">opaque_to_polygons</span><span class="p">(</span><span class="n">Rect2i</span><span class="p">(</span><span class="kt">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()),</span> <span class="n">epsilon</span><span class="p">)</span>
			<span class="nb">print</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="s2">"_"</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">,</span> <span class="s2">" "</span><span class="p">,</span> <span class="n">polys</span><span class="p">)</span>
			
			<span class="k">var</span> <span class="n">area</span> <span class="o">=</span> <span class="n">Area2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
			<span class="n">results_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
			<span class="n">area</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
			<span class="n">area</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">]</span>
			<span class="n">hurtbox_dict</span><span class="p">[</span><span class="n">area</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
			
			<span class="k">for</span> <span class="n">poly</span> <span class="ow">in</span> <span class="n">polys</span><span class="p">:</span>
				<span class="k">var</span> <span class="n">collision_polygon</span> <span class="o">=</span> <span class="n">CollisionPolygon2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">polygon</span> <span class="o">=</span> <span class="n">poly</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">-</span><span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>
				<span class="n">area</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">collision_polygon</span><span class="p">)</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">On building a Pokémon TCG Cube</title><link href="https://nateplays95.github.io/blog/2024/on-building-a-pokemon-tcg-cube/" rel="alternate" type="text/html" title="On building a Pokémon TCG Cube"/><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>https://nateplays95.github.io/blog/2024/on-building-a-pokemon-tcg-cube</id><content type="html" xml:base="https://nateplays95.github.io/blog/2024/on-building-a-pokemon-tcg-cube/"><![CDATA[<div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo1.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I’ve been on a Pokémon TCG craze for almost a year now, both as a way to bond with my friends, as well as to satisfy my “strategy-game” neurons with something a little more physical. My project for last year was building a Cube for Cube Draft, and today I wanna share a bit of how I got to build one and some of my design considerations.</p> <p>I should first explain some terms for those unfamiliar with “cubes” in trading card games:</p> <ul> <li> <p>Draft: A play format where instead of using pre-assembled decks, players open card packs or “boosters” and have to build a deck from the random selection of cards they obtained, alongside some extras like resource cards. Not only are there very peculiar rules for drafting cards with a group of people, but games like Magic the Gathering have entire card sets built with the drafting or “Limited Format” experience in mind.</p> </li> <li> <p>Cube: from the MtG community, a “cube” is a collection of cards, usually over 300, stored in a container for the purpose of building “homemade boosters” for a draft experience that doesn’t require buying new boosters every time. Cubes were initially made out of bulk cards from someone’s collection but they can also be assembled very meticulously.</p> </li> </ul> <h2 id="how-did-i-get-here">How did I get here?</h2> <p>My journey with cubing started just after my first pre-release event for Pokémon TCG. These work like a soft-drafting experience, with each player receiving two randomly-chosen half-decks from a set of four options, as well as a handful of boosters for the “deckbuilding” part. So you could find an extra attacker or supporter for the deck you received, or multiple cards of another color to pivot the deck into another direction, or even a powerful “rulebox” card that may help flip the scales in a difficult matchup and ask you to change your deck to better support it.</p> <div class="row mt-3"> <div class="col-3 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/prereleasereboot1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-3 mt-3 mt-md-0"></div> </div> <div class="caption">I finished the tournament in third place by the way!</div> <p>After that, though, I had a hundred cards, pokémon trainer and energy alike, that I didn’t have any use for. I also had a few cards from opening boosters so now my box of spare cards was really heavy. I wondered what to do with all those fun cards. I also really really wanted to play more draft, but had used all my money for that month.</p> <p>Then I found this video on drafting pokémon cards by TheJWittz.</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/_l9-FJZj3V0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="caption">I fell in love with cube draft.</div> <p>I watched videos on playing and even building cubes, for both MtG and Pokémon, and grew incredibly excited to have this very “board game-y” experience of sitting down with friends for a few hours and playing something I had a hand in building. As someone who loves making games and art and loves doing group activities that’s the best thing I never thought I needed.</p> <p>I then got all the cards I had, bought a few more bulks from other players to get all the energy colors, and started assembling my own cube. Month by month I expanded my collection, buying cards for the sole purpose of adding them to the cube and experimenting with them. Cards that would hardly see any play elsewhere but could fit nicely in a cardset I have complete control of and can balance accordingly. A few months later I finally got a group of friends to play the cube draft for the first time, and we had a lot of fun!</p> <h2 id="my-design-process-for-the-cube">My Design Process for the Cube</h2> <p>I ended up with a ~400 card cube, which supports up to 8 players. I wanted to include all the 11 types from pokémon’s recent history, which meant including a very decent count of cards for each. Players build decks of 40 cards, with roughly 12 pokémon, so to support at least three players including any one type in their decks as half their type support I’d need close to 20 pokémon. We do 3 boosters (sets of 15 random cards) at a time, with each booster taking around 10 minutes to draft completely. I considered opening 4 boosters for better deckbuilding but so far I felt a fourth booster would drag the building process for too long and leave less time for playing the decks.</p> <p>At first I just picked enough cards of each type from my bulk, as well as very cheap supporter cards I bought from stores, just to complete 360 cards. I then kept an eye for cool and unusual cards in other people’s binders I could include in the cube. Cards like Charizard and Tyranitar and Pikachu were included less because of their power and utility and more because there’s this “fantasy” of battling with cool and popular pokémon I wanted to capture. I made sure to include both cute and cool mons in each type, so that newer players could discover new favorites and older players could have fresh experiences from other formats.</p> <p>Then, as the cube started to take shape, I looked for very specific cards to better balance specific strategies or archetypes, like a few Switch cards, mons that buy cards and accelerate energy, a few Cynthias and Pokémon Fan Clubs to add consistency to decks, and some Super Rods and Energy Retrievals to extend deck life. Eventually some of the mons I got from my bulk went back to the bulk, and I did buy many more cards I ended up not using, but at this point I’m way too invested to bother.</p> <p>Buying a handful of cards every month wasn’t a massive monetary investment or anything, and it meant I could continuously engage with building the cube even after the hyperfixation had passed. Of course, I also did simulated drafts with myself and played casually with my cousins before getting to what I’d consider a “balanced” state.</p> <div class="row mt-3"> <div class="col-3 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo3.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-3 mt-3 mt-md-0"></div> </div> <div class="caption">It's much harder to both balance and randomize 11 color attributes.</div> <h4 id="mutant-evolution">Mutant Evolution</h4> <p>This rule allows any Stage1 mon to evolve from any Basic mon from the same type, same for Stage2 cards. Normal Evolution rules still apply. It was made to address how wonky and limiting the evolution rules for the TCG actually are for deckbuilding, and helps the game feel more closely match the ones from MtG and in particular the new Digimon TCG, while still including a variety of pokémon of each type. Otherwise, a three hundred card cube would only have two or three evo lines and that’s boring.</p> <p>Yes, this means you can evolve a Mewtwo into a Kirlia, or a Tynamo into an Electivire. It’s a very interesting rule that would be strongly abused in official formats, but it can be deliberate in a cube setting. As such, I made sure each type had a good assortment of powerful Basic and Stage1 pokemon, one or two legendaries (and a fair number of bad pokémon too haha).</p> <h4 id="pokémon-proportions">Pokémon Proportions</h4> <p>Each pokémon type is represented by 24 monsters, with a spread of roughly 12 Basic, 9 Stage1 and 3 Stage2 cards. It may feel unbalanced at first, with other cubes having less drastic proportions, but the Mutant Evolution rule allows for very powerful cards in the Basic and Stage1 groups, so each type ends up having 8 or so chase cards, as well as some neat support cards.</p> <p>Roughly a third to half of the pokémon carry abilities, as a good amount of cards came from card bulk so of course they wouldn’t have useful abilities. It also gave me room to include interesting effects tied to pokémon moves, like energy acceleration from deck, or switching out the opponent’s active mon, or doing massive damage with added recoil.</p> <p>Even with the spread biased towards basic pokémon, some players said they had really bad luck finding basics for their initial evolution picks. I first assumed it was a mix of bad deckbuilding and bad booster luck, but a third factor I only later noticed was how biased the type selection between players was. Three players started to chase Fairy cards for the novelty of a now dead type, and the only decks running Fire and Water cards were newer players with less experience which ended up making decks with 4 energy types.</p> <h4 id="trainer-support">Trainer Support</h4> <p>The recommended spread of trainers cards is roughly half the cube, so from 3 packs of 15 you potentially have ~22 trainers to choose from to build a deck of 40 which should have roughly 10-15 trainers. From my last playsession though, either I miscounted or the suffle was really unlucky but I felt a distinct lack of trainer cards from my picks. It’s a fine balance; too few and games feel unflexible and players stay stuck with bricked hands for too long, too many and players can’t find decent pokémon of their chase type in a sea of pokéballs and vitality bands and nurse joys.</p> <p>At first I was going to solely add generic and flexible trainers every deck could use like Switch and Boss’s Orders, I felt games would end up too unpredictable due to trainers, and I’d like the surprises and gotcha moments to come from the mons themselves. Still, I left some of those powerful trainers for keen-eyed veterans to look out for.</p> <p>Instead, I included less “meta” cards for Standard but which could still be useful with the lower power level, like Energy Retrieval or Pokémon Center Lady, which have come in handy in a few matches. I also included both type-specific support, trying to keep at least 3 or 4 cards including supporters, items and tools to help each type. There are also cards that see little to no use in constructed pokémon tcg formats but can be played around with here, like cards to make both pokémon confused or cards to re-roll coin tosses or cards to look at your opponent’s hand.</p> <p>Also, in a limited format without “big basic” rulebox mons and <em>very limited</em> options for switching out, strategies around Status Effects are valid. I made sure to include a handful of mons with those effects, as well as tools and supporters to both apply and remove them easily. There are also many pokémon and stadiums that deal more damage if the target has an effect, or increase the potency of that effect. Healing is also a valid strategy now, as health pools are smaller and attacks weaker, so I included heal supporters and items. Finally, the limited card pool means those powerful effects printed onto cards balanced by ending your turn early like Kiawe and Boost Shake are actually usable, as turns tend to be slower from the lack of staple supporters and basic pokémon with powerful setup abilities.</p> <h4 id="encouraging-type-mixing">Encouraging Type-mixing</h4> <p>Between having to support 11 entire types instead of the usual 5 or 6 attributes in other TCGs, and having to deal with multiple players also chasing cards of the same type, players will inevitably end up making decks with at least two types. I personally think building around 3 basic energy types is the usual, 2 is an achievement and 4 is less than desirable. Having more types can help you escape out of unfavorable weakness matchups as well as combine synergistic effects.</p> <p>At least half the types have one pokémon with entirely colorless attack costs, and all have pokémon with many colorless costs in their attacks. By making these costs achievable with any energy color, Pokémon makes these cards more “mixable” with other types, maybe to balance weaker attacks with versatility, or to incentivize using Special or Double colorless energy (a trick I also do, with as many as 6 double colorless in the cube so far). There are still cards with no colorless costs; these are usually more powerful to combat the lesser flexibility both by their original design intention and by my own selection.</p> <p>Pokémon can also be mixable with their effects, by affecting pokémon outside their type. This is especially fun with Basic pokémon as they can then be included in any deck and be useful with the only caveat being they may take the place of another basic that could be used for evolution. In counterpart, pokémon with really powerful effects (like deck search, rain dance or healing) are usually limited to supporting only their own type, which is an interesting deckbuilding consideration.</p> <div class="row mt-3"> <div class="col-1 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-Promo_SWSH-SWSH232-charmander.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv1_en_031-1.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-Promo_SWSH-SWSH221-cyndaquil.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-1 mt-3 mt-md-0"></div> </div> <div class="caption">You can see how, despite having similar attacks, Charmander's effect is exclusive to fire types while Cyndaquil's can be used in any deck.</div> <p>Some cards can also encourage type mixing by design, either by adding extra effects if different energy is equipped like more damage or applying status, or by interacting with effects their type is not normally associated with like fire types applying poison or using venoshock, or even by outright requiring different energies to pay attack costs, like most Dragon-type mons.</p> <p>Also, Mutant Evolution introduces a fun flavor of mixing: cross-type evolution lines. I made sure to include many lines that change type when evolving as if to encourage players to build around those types to have better consistency, like fairy azurill to water marill or grass scyther to steel scizor or fire salandit to poison salazzle or dragon zweilous to dark hydreigon etc etc. Building a deck with both grass and metal cards means grass Scyther can be another valid path to your Stage2 metal Metagross, which is not only fun during deckbuilding but also a fun clutch play for you and a surprise for your opponent. Having more colorless costs further helps cross-type evolution.</p> <h4 id="power-balancing-including-both-fairy-and-dragon-together">Power Balancing; including both Fairy and Dragon together</h4> <p>Even just looking at the Black/White cards and forward, there are major differences in power from 10 years of continuously making and selling new cards. Where a Tyranitar from early 2010s would deal 150 damage with four or five energy, a Tyranitar from 2023 does 230 with only two energy. While I made sure to give every type a similar distribution of new and old cards, with famously weaker types like fighting getting a helping hand, and for the most part avoiding many 2023 cards, I didn’t shy of including straight up worse and better cards inside a single type.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-XY10-056-tyranitar.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv2_en_135.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"> </div> </div> <div class="caption">I still included the old Tyranitar in the cube because its Raging Roar ability seems really hype and fun.</div> <p>I think part of building a draft experience is making obviously good cards to alleviate some choice paralysis and reward each good picks from boosters, and making bad cards that may afterwards get people thinking “can I still salvage this?..”, which is very much part of the fun in building your deck on the spot.</p> <p>The Fairy type, even during its run, famously had low HP pools and lower attack power, instead focusing on support and healing, situational effects even in this cube. Adressing it was simple enough, I made sure to pick the strongest fairy cards I could find, with Xerneas accelerating energy, Shiinotic searching other fairy mon, Togekiss doing mass healing, Florges decreasing attack costs (compensating for the weak attacks lol), and the infamous “Wages of Fluff” Whimsicott allowing the next attack to take extra prizes.</p> <p>As for the Dragon type, it was completely absent in the TCG for the Sword and Shield era for almost two years, so there’s a gap in power between Sun and Moon dragons and Scarlet and Violet dragons. At first I wanted to include solely basic dragons with either full colorless costs like Drampa or interesting abilities like Regidrago, as evolving into a different dragon with wildly different costs felt bad, but I then embraced the idea of dragon types as these “splashable” mons into two or three type decks, with powerful attacks as encouragement to build decks around their type requirements.</p> <p>Dragons are designed with the mindset of locking away powerful attacks with less consistent energy requirements, and I want to follow this balance. While I did include Rainbow energy and Double Dragon energy, there are only one copy of each, as rare chase cards. Dragon types from the Black and White and XY era were too weak for their energy costs, so I’m choosing the Stage2 cards from the newer sets as you need to both evolve AND match the correct energy types. As such, it’s the only type I didn’t feel bad stacking very powerful cards from Scarlet and Violet like Dragonite doing 180 damage with two energy: if a player drafts this card they might consider building a water+lightning deck just to enable it, and I think that’s fun.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-BW9-083-dragonite.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv3-5_en_149_std.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"> </div> </div> <div class="caption">Old dragon cards are not even worth including, I think.</div> <h2 id="maintenance">Maintenance</h2> <p>I had close to 600 cards counting all the energy cards players have available to build the decks. As such, I needed some sort of container to store and transport those cards, and card sleeves to both protect the cards and help with shuffling during playtime and re-sorting the collection. Actually decent options for either of those would each ask me more money than I invested in the entire cube, so for now I cheaped out to get something playable.</p> <p>For storage, I’m using a spare cardboard box from a pair of sandals we bought. Lucky me the cards are a very tight fit so they don’t shake around too much, and the box fits in my travel pouch neatly. It’s just cardboard though, so I’m using elastic bands to hold it shut. For sleeves, I went with those “penny sleves”, cheap transparent sleeves sold in packs of 100 for 3 dollars or less. They’re not all equally sized and some have funky finishing at the edges, but they were affordable in bulk and both protect the foils well enough and make shuffling actually possible, so that’s enough for now.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo2.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">"Professionals have standards."</div> <p>As for shuffling the four-hundred or so cards to make boosters, I usually do it at home after a playsession (or after making tweaks), it’s kinda relaxing. Randomly shuffling a deck is simple enough, just cut and mash the cards together a few times, but this cube is the size of 7 standard decks so that’s a no-go. Luckily, I found <a href="https://nex3.medium.com/how-to-randomize-a-cube-8efc20bd87ae">this article by Natalie Weizenbaum</a> detailing how she tackles the problem.</p> <p>In sum, first place all your cards in equally sized piles (I like to do 12 or 16 piles myself), which doesn’t randomize the cards by itself, but helps with the next step: thoroughly shuffle all the individual piles. Then stack those piles and repeat the process a few times. Personally I feel it’s random enough after 2 or 3 steps, but each step takes around 10 minutes at a lax pace. Funny enough, if you place an equal amount of cards of each type in each pile, shuffling only once may actually lead to a less random but more balanced distribution of colors per booster. I still need to try that out, though.</p> <h2 id="final-thoughts">Final Thoughts</h2> <p>I wish there was a practical way to both make a cube-list for pokémon online and to export it for testing in, say, Tabletop Simulator. At the time of writing I just discovered <a href="https://pokemoncard.io/cube/">the Cube Draft section in pokemoncard.io’s website</a>, it’s fairly hidden. It can’t export to TTS but there’s a beta feature for drafting with friends from the browser and creating a decklist to use in something like LimitlessTCG. I might set a free weekend to port my physical cube to the website.</p> <p>I’ve heard some people rent their Magic cubes for others to play, so I could look into that to kinda recoup my costs or invest in better storage, but for now I can barely even get my friends to play the cube, so asking them for both their time and money would feel really bad. As I mentioned at the start, I like to treat the Cube draft similarly to a board gaming night with Munchkin or D&amp;D oneshots or other games that require a long time commitment and a close group of friends. Something I can use to spice an otherwise boring travel weekend or downtime in an anime convention.</p> <h1 id="update">Update</h1> <p>I ported the cube over to the PokemonCard website! I’m 90% sure it’s not missing any cards amongst the 470. The cube experience is a bit buggy but you can simulate a draft with friends on the website, then send the cards to the pokemoncard deckbuilder, and from there send to wherever you want to play on.</p> <p>Here’s the link: <a href="https://pokemoncard.io/cube/view-cube/71">https://pokemoncard.io/cube/view-cube/71</a> To play, “Clone” the cube to your account and from your cube collection you can play it.</p>]]></content><author><name></name></author><category term="tcg"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Plans for 2024!</title><link href="https://nateplays95.github.io/blog/2024/plans-for-2024/" rel="alternate" type="text/html" title="Plans for 2024!"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://nateplays95.github.io/blog/2024/plans-for-2024</id><content type="html" xml:base="https://nateplays95.github.io/blog/2024/plans-for-2024/"><![CDATA[<p>2024 is upon us, and with a new year come new year’s resolutions of course! Of course, I’ve set myself the usuals like going to the gym or writing more blog posts, but I specifically want to share what I have in mind for my dev projects this year.</p> <p>First off, I want to study how to handle Local Multiplayer (as in couch multiplayer) in Godot. Growing up with the PS2 and Xbox 360 I’ve always been a massive fan of split-screen and party games, and even to this day I love games like Smash Bros or Towerfall. So far the most flexible solution I’ve seen is making <em>input maps for every single controller port</em>. Shy of making my own controller input plugin, that’s what I’ll have to use for now. I’ve also come to appreciate Parsec for testing multiplayer games as, with Godot not recognizing my Joy-Cons via bluetooth, using parsec is the best way for me to get extra controllers connected.</p> <p>In addition, I’m also an assistant programmer in a local dev team working on a visual novel. Not sure how much I can share just yet, but we’ll be taking it to some small gaming and anime conventions nearby, and that’s a first for me. Project Nitro was tested by mostly colleagues and acquaintances, but this time we’ll be getting feedback from complete strangers, and not gonna lie but it makes me a bit anxious haha.</p> <p>Finally, 2024 might be my last year as an undergraduate, and that means I’ll soon need to think about my course completion work. As a computer science student, it will probably be some sort of research paper, but on what topic I’m not sure. I could use my previous projects in driving simulation as a starting point on machine learning drivers like Drivatars, or shift into artificial life simulations like The Sims games, but there’s still a lot of time to figure that out.</p> <p>My plan for the blog is to make at least one post per month. Writing these is not inherently rewarding but I still want to document my journey. I also need to update my projects page, and maybe add smaller sections like mods and tabletop games. You’ll be hearing from me soon! 💫</p>]]></content><author><name></name></author><category term="personal"/><summary type="html"><![CDATA[2024 is upon us, and with a new year come new year’s resolutions of course! Of course, I’ve set myself the usuals like going to the gym or writing more blog posts, but I specifically want to share what I have in mind for my dev projects this year.]]></summary></entry><entry><title type="html">Making Project Nitro</title><link href="https://nateplays95.github.io/blog/2023/making-project-nitro/" rel="alternate" type="text/html" title="Making Project Nitro"/><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><id>https://nateplays95.github.io/blog/2023/making-project-nitro</id><content type="html" xml:base="https://nateplays95.github.io/blog/2023/making-project-nitro/"><![CDATA[<p>Last week I made <a href="https://nate-the-bard.itch.io/project-nitro">Project Nitro</a> public in my itch.io page, so I’d like to write more about the process of taking it from idea to prototype. This one is a long read as there’s so much to catch up with, but I’ll try to write shorter posts next time 😅.</p> <h2 id="idea">Idea</h2> <p>I love cars and racing, and I love making games, so of course the idea of making my dream racing game has been with me since I learned Construct 2 back in 2018 and made my first little games. Back then, there were attempts at making silly browser racing games from me, but between not knowing many programming patterns and not being satisfied with my driving physics, I scrapped all of them.</p> <p>Fast forward some 5 years, uni assignments are slowing down and I’m getting bored. I’ve already made better driving models since then, but not a lot more than following tutorials from internet people and doing some research on the side. I was on the low of dropping from two game jams and almost dropping a third, so I decided to get on with a pet project. Well, if I already have the driving systems online, how hard would it be to make a little game around it?</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-0.png" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">This wasn't my first rodeo, at least with cars.</div> <h2 id="the-plan">The Plan</h2> <p>First, I’d adapt the driving model to be a bit more arcade-y. I was playing some Mario Kart and Ridge Racer at the time, so I, ahem, “borrowed” some assets to help match the feel. Then, I’d need to make a few tracks, and some way to make progress in them and complete laps. Finally, I “just” needed to get AI and items in, and make something like Blur where you choose a car, an event, you race with powerups on the track, and get points on victory.</p> <p>I definitely overscoped it.</p> <p>I just wanted to know if I knew how to make a game out of my car system, I didn’t need it to be “market-ready” or anything. What if I spent 12 months on the project and it wasn’t fun to play, or the codebase was a nightmare to work with? Something smaller was enough for my purposes.</p> <p>So the plan eventually ended on: Make a few cars, a few tracks, a Time Attack mode, and menus to go back and forth. That would be my prototype, and if it had good reception and I <em>actually enjoyed making it</em>, I could expand it to an actual game in the near future.</p> <h4 id="controls-and-camera">controls and camera</h4> <p>My original simulation model was twitchy and required very precise inputs. I knew I wanted the game to be more arcadey and accessible in general, so following <a href="https://youtu.be/n_A0RqeGado?si=eni13AUtXr2w-OrA">this GDC talk by a veteran at Criterion Games</a> and playing a bunch of NFS Hot Pursuit Remastered, I went with the following approach:</p> <ul> <li>Make more accurate simulation systems first;</li> <li>Add constraints and assists as needed.</li> </ul> <p>The suspension is your usual Raycast Suspension, and both engine and steering use simple applied forces to the rigidbody. To drift, I decrease the car’s traction to the ground and add an extra lateral force for good measure, it’s unrealistic but it’s fun like old racers. There are also “assists” to apply brakes if the car is rolling down a slope and the throttle is off, and assists to roll the car straight if it is airborne.</p> <h4 id="on-tracking-race-progress">on tracking race progress</h4> <p>The modern method nowadays is to use a spline or path throughout a track, and have cars match to the closest point in that spline. Godot Path3D nodes are still kinda funky so I went with a simpler approach: good old Checkpoints.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-checkpoints.webp" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Checkpoints in Mario Kart are a tiny bit more complicated than this.</div> <p>Implementations can vary, but the idea is simple: To complete a race, you must <em>hit</em> all checkpoints, possibly in order. Sometimes some checkpoints can be skipped, so games use “key checkpoints” for race validation, and the smaller checkpoints for race progress. To rank drivers, check their last checkpoint, and in case of a tie, check the distance to the next checkpoint.</p> <p>I only mention this as it came back to bite me later: making AI drivers follow checkpoints was much harder than following paths. I’d need a “racing line” Path3D for computer drivers either way. This choice single-handedly made me not want to add AI drivers in this prototype, so I’ll be leaving those for a future project.</p> <h2 id="first-playtest">First Playtest</h2> <p>In my city we have a little event organized by some friends of mine, where small game developers bring their projects for other to play, give feedback, and network in general. It’s more of a “community gathering” sorta thing, although we do receive local indie studios there as well, and it’s monthly, so having started the project in October, I should be able to take it to two gatherings before the end of the year.</p> <p>I didn’t get to go to the first gathering myself, but a friend brought the demo and took some photos.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-1.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-2.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-3.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Photos from the first playtest event. You can see the placeholder assets.</div> <p>Some bugs aside, it seems people enjoyed the build. By then I had added the Time Attack feature, and according to my friend some of the visitors there were even competing for times. I couldn’t have heard anything better from it.</p> <p>As for the bugs, the game had poor performance on the cheaper machines in the venue. Sure, I was using shadows and many light sources in that build, but “it ran at 200 FPS in my gamer laptop, so there shouldn’t be any problems”. For that reason, I switched the project’s rendering pipeline in Godot from the Vulcan based Forward+ to the at the time very incomplete OpenGL Compatibility pipeline. It didn’t even have support for shadows back then, so I was forced to make it light on resources haha.</p> <h4 id="swapping-assets">swapping assets</h4> <p>Now I just need to swap the cars and tracks. I mean, a track is a track, any layout should do right? In my first attempt, I just copied some curves from the Bernese Alps track in Forza Motorsport 4, a simulation racer. It took me some time tweaking materials and road camber to match. It felt great to drive in the original game from all the different corners and elevation changes, so I felt confident it would fit.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-4.jpg" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Realistic? Sure. Fun? Not very.</div> <p>I couldn’t quite pinpoint why it felt bad to drive on the track, yet the stolen tracks from Mario Kart were really nice and fun. And no, it wasn’t the visuals, the car was quite fun on top of a white test cube. That was, until I finally gave up and made a test map with cylinders of various sizes to test cornering:</p> <div class="text-center"> <figure> <video src="/assets/video/devlogs/making-project-nitro-cylinders.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> <p>The corners in the Alps replica were either too wide and shallow to drift (and unlike a sim, the simple act of cornering wasn’t a challenge), or were too acute and low-speed to do high-speed drifts, which I think is the most fun part of a Mario Kart-like driving model. The placeholder tracks had wide enough corners to carry long drifts in, and sharp enough corners to test reaction time and racing lines. That day I learned track design is actually harder than it looks.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner3.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Corner sizes were determined from the driving model. Yes, the car is not accurate to real life scale.</div> <p>I used the built-in CSG nodes in Godot to prototype the levels, which ended up being very painful as my driving model would bug out here and there, the pieces are had to lay out on the scene and somehow even harder to pick with your mouse cursor if they’re in clumps, and I again forgot you could use Path3D nodes to lay out CSG meshes to shape a track. I need to learn a new workflow (probably a blender-first, engine-later flow) if I want to make more of these maps.</p> <p>Finally, the Ridge Racer car models needed to get out. The date for the second playtest event was approaching so I didn’t want to model new vehicles myself, but also didn’t want just white cubes as vehicles. When I was looking for modelling help I still had the racing game Blur in mind as a visual inspiration, so when two members of my local community reached out to help, my request was for a more realistically modeled car. <a href="https://ilustrawes.itch.io/">Wesley</a> and <a href="https://www.artstation.com/paulohncostaart">Paulo</a> did amazing work, maybe too amazing, and now my poor decision-making lead me to a PS2 quality model in a world of white cubes…</p> <p>In the end, some more experienced contacts advised me to use only free assets for the prototype as its purpose is solely the implementation of car and race systems, and leave non-essential graphics for an actual game. I ended up following their word, and instead used the rally car models from <a href="https://assetstore.unity.com/publishers/52093">Ash Dev</a> (the earlier artists were ok with this). I then finalized some menus and picked some stock photos from Unsplash and it was ready to post online.</p> <h2 id="second-playtest">Second Playtest</h2> <p>The day had come. This time I was in town and the event was bigger than usual, being the last for the year, some 20 attendees. I was excited and a bit tense, I don’t usually show my work to so many people. Before setting up the test PCs I actually got to talk to some new faces about my project and some of the challeges above, and that’s always great. I also got to test games from my colleagues, give feedback and even help fix some bugs on the fly.</p> <div class="col mt-6"> <div class="row-sm mt-1 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-5.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row-sm mt-1 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-6.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">If you ever go to an event like this, I highly recommend a small notebook to write down all the feedback.</div> <p>While I didn’t get much constructive feedback on issues (people actually understood the assets were unpolished on purpose), everyone seemed to approve the controls, and had nice words about the camera work and handling. I did my job, the car was fun to control and felt fast. Sadly the venue had to close earlier than planned so people didn’t get time to replay it for fun. What a bummer.</p> <p>I did take some notes when guiding and watching the players, though. It wasn’t obvious to me until that moment but, even though the drift system is a spitting image of the one in Mario Kart, both the fact the cars don’t look like karts or cartoony in general and the drift doesn’t spark like the one in the Nintendo game, so the connection wasn’t immediate to some players and they took some slower laps while I explained drift-boosts to them. Fortunately, everyone got the hang of it by the second or third go-round.</p> <p>Also, even though I made three cars with different driving styles, unless you’re a car guy and know your Group Bs and your Lancia Deltas, their strengths weren’t immediately apparent by their design, so instead of adding some flavor text for each car or some driving stats by their side, I just had to explain why “this one drifts kinda funky”. I should probably patch this in soon.</p> <h2 id="closing-thoughts">Closing Thoughts</h2> <p>I’m glad I made Project Nitro. There were many learning opportunities throughout those two months, and it’s probably the first time I had playtesting as a major part of my project calendar. It was also great just <em>finishing</em> something in a good while, last time I made a nice and packaged project to share was Lotus and Lyric back in February.</p> <p>The dream of making a racing game is ever closer, but there’s still lots of work to do to get there. AI drivers, track layout, art direction, progression, user interface, multiplayer, these are some of the aspects that still require research from my end. I’ll also need to learn how to better manage a team of artists and contributors as I’ll likely not be able to do every single facet of the game myself, as much as I wanted to.</p> <p>Project Nitro now exists. I can fork it if I need to make another racing game. I will wait a bit more before picking it up again, though.</p>]]></content><author><name></name></author><category term="devlog"/><category term="project-nitro"/><summary type="html"><![CDATA[Last week I made Project Nitro public in my itch.io page, so I’d like to write more about the process of taking it from idea to prototype. This one is a long read as there’s so much to catch up with, but I’ll try to write shorter posts next time 😅.]]></summary></entry><entry><title type="html">I have a blog!</title><link href="https://nateplays95.github.io/blog/2023/i-have-a-blog/" rel="alternate" type="text/html" title="I have a blog!"/><published>2023-12-10T00:00:00+00:00</published><updated>2023-12-10T00:00:00+00:00</updated><id>https://nateplays95.github.io/blog/2023/i-have-a-blog</id><content type="html" xml:base="https://nateplays95.github.io/blog/2023/i-have-a-blog/"><![CDATA[<p>I’m not much of a writer, nor do I use social media that much, but I still felt I needed some place to just write on what was going on in my life that week or month. It certainly beats sending screenshots of cool stuff I made to 5, 10 people at a time. Affirmation is great and all, but “Like and Retweet” numbers stress me out, so an alternative platform would be great.</p> <p>That’s why I made this blog.</p> <p>While updates will be pretty frequent at the start as I put all my backlog of news and events here in text form, and update my projects portfolio, expect the posts to slow down a far bit. I fully expect to forget this blog even exists for a few months at a time, but hey, as long as I’m living my life instead of chasing numbers, it should be OK.</p> <p>As of the time of writing this, I want to write on a few jam games I’ve made, as well as some other hobbies. Having a blog made with Jekyll makes it simple enough, so I hope I get the hang of it quick. See you there!</p>]]></content><author><name></name></author><category term="personal"/><summary type="html"><![CDATA[I’m not much of a writer, nor do I use social media that much, but I still felt I needed some place to just write on what was going on in my life that week or month. It certainly beats sending screenshots of cool stuff I made to 5, 10 people at a time. Affirmation is great and all, but “Like and Retweet” numbers stress me out, so an alternative platform would be great.]]></summary></entry></feed>